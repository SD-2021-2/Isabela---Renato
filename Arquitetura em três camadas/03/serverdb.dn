component provides App requires io.Output out, net.TCPServerSocket,
                                net.TCPSocket, data.json.JSONParser parser,
                                data.StringUtil su,data.DecUtil du, data.adt.List li {

    void streamHandler(TCPSocket s){

        out.println("Client Accepted")
        char buf[] = null
        char myData[] = null
        char result[] = null
        while ((buf = s.recv(1)).arrayLength > 0) {
            myData = new char[](myData, buf)
            if (buf == "\n") {break}
        }

        JSONElement document = parser.parseDocument(myData)
        char nota1[] = parser.getValue(document, "n1").value
        char nota2[] = parser.getValue(document, "n2").value
        char nota3[] = parser.getValue(document, "n3").value

        dec n1 = du.decFromString(nota1)
        dec n2 = du.decFromString(nota2)
        dec n3 = du.decFromString(nota3)

        bool flag = false

        if ( ((n1 + n2) / 2) >= 7 ){
            flag = true
        }else if (( ((n1 + n2) / 2) > 3) && ((n1 + n2) / 2) < 7 ){
            if (((n1+n2+n3)/3) > 5){
            flag = true
            }
        }
      
        if ( flag == true ){
          result = "Aprovado"
          s.send("Aprovado")
        }else{
          result = "Reprovado"
          s.send("Reprovado")
        }
        s.disconnect()
    }


int App:main(AppParam params[])
          {
          TCPServerSocket host = new TCPServerSocket()
          host.bind(TCPServerSocket.ANY_ADDRESS, 2021)

          out.println("Waiting for clients...")

          while (true)
                {
                TCPSocket client = new TCPSocket()

                if (client.accept(host))
                    asynch::streamHandler(client)
                }

          return 0
          }
  }
