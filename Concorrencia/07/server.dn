component provides App requires io.Output out, net.TCPServerSocket,
                                net.TCPSocket, data.json.JSONParser parser,
                                data.StringUtil su,data.DecUtil du {
    void streamHandler(TCPSocket s)
          		{
                out.println("Client Accepted")
                char buf[] = null
                char myData[] = null
                while ((buf = s.recv(1)).arrayLength > 0) {
                  myData = new char[](myData, buf)
                  if (buf == "\n") {
                      break
                  }
                }
                JSONElement document = parser.parseDocument(myData)
                char idade[] = parser.getValue(document, "idade").value
                char tempo[] = parser.getValue(document, "tempo").value

                dec id = du.decFromString(idade)
                dec tmp = du.decFromString(tempo)
                bool flag = false

                if ( (id >= 65 && tmp >= 30) && ( id >= 60 && tmp >= 25)) {
                    flag = true
                }
                if ( flag == true ) {
                    s.send("Pode Aposentar")
                }else{
                   s.send("Nao Pode Aposentar")
                }
                 s.disconnect()
              }
    int App:main(AppParam params[])
          		{
          		TCPServerSocket host = new TCPServerSocket()
           		host.bind(TCPServerSocket.ANY_ADDRESS, 2020)

          		out.println("Waiting for clients...")

              while (true)
                    {
                    TCPSocket client = new TCPSocket()

                    if (client.accept(host))
                    		asynch::streamHandler(client)
                    }

              return 0
              }
    	}
