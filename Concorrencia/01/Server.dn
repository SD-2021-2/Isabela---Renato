component provides App requires io.Output out, net.TCPServerSocket,
                                net.TCPSocket, data.json.JSONParser parser,
                                data.StringUtil su,data.DecUtil du {
    void streamHandler(TCPSocket s)
          		{
                out.println("Client Accepted")
                char buf[] = null
                char myData[] = null
                while ((buf = s.recv(1)).arrayLength > 0) {
                  myData = new char[](myData, buf)
                  if (buf == "\n") {
                      break
                  }
                }
                JSONElement document = parser.parseDocument(myData)
                char nome[] = parser.getValue(document, "nome").value
                char cargo[] = parser.getValue(document, "cargo").value
                char salario[] = parser.getValue(document, "salario").value

                dec salario2 = du.decFromString(salario)

                if ( su.iequal(cargo,"programador") == 1 ){
                		salario2 = salario2*(1.18)
                }
                if ( su.iequal(cargo,"operador") == 1 ){
                		salario2 = salario2*(1.2)
                }
                char salario3[] = du.makeString(salario2)
                char result[] = "$nome $salario3"
                s.send("$result")

                s.disconnect()
              }
    int App:main(AppParam params[])
          		{
          		TCPServerSocket host = new TCPServerSocket()
           		host.bind(TCPServerSocket.ANY_ADDRESS, 2020)

          		out.println("Waiting for clients...")

              while (true)
                    {
                    TCPSocket client = new TCPSocket()

                    if (client.accept(host))
                    		asynch::streamHandler(client)
                    }

              return 0
              }
    	}
